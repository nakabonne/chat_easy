// Code generated by go-bindata.
// sources:
// templates/chat.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesChatHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\xcd\x6e\xd3\x4e\x10\xbf\xf7\x29\xe6\xbf\xff\x1e\xec\x03\xde\xe6\x56\x25\x4e\x0e\xbc\x02\x07\x0e\x88\xc3\xc6\xd9\x24\x6e\xd7\xde\xe0\x5d\x37\x89\xa2\x48\xb5\x8d\x10\x87\x0a\x24\x90\xa8\x28\x48\x55\xa9\x68\xa1\x3d\x20\x84\x28\x12\x2a\xed\xc3\x4c\x4b\xe1\xc4\x2b\x20\x7f\xc4\x71\x4a\x72\x70\x26\x3b\xb3\xbf\x8f\x99\x89\xed\xbe\xf6\x44\x6b\x05\xc0\xee\x73\xd6\x49\x03\x00\x5b\xbb\x5a\xf0\x16\x26\x11\x26\x87\x98\x24\x98\x3c\xb5\x69\x7e\x96\xe7\x95\x1e\xcf\x62\x00\xd7\x1f\x84\x7a\xd2\x71\xd5\x40\xb0\x71\x1d\xda\x42\x3a\x9b\x8d\x69\x91\x0c\xc5\x44\xb8\x4a\xdf\xc9\x6e\xd4\xc1\x97\x3e\x2f\x72\x36\x2d\x51\x6c\x3a\xe3\xb6\xdb\xb2\x33\x2e\x48\x42\x01\x6e\xa7\x49\x3c\xae\x14\xeb\x71\x45\x5a\x36\x0d\x45\x9e\x1b\xf2\xb6\x92\xce\x26\xd7\x18\xbf\xb8\xfa\x71\x89\xd1\x21\x46\xfb\x55\xb9\x18\xbf\xc3\x64\x17\x93\x13\x8c\x3f\x63\x72\x8e\xf1\x37\x4c\x8e\x31\xf9\x92\x23\x77\x65\xe0\x65\xd8\x4e\x9f\xe9\xb6\x1c\x91\x99\x15\x5b\xf3\x91\x66\x01\x67\x2d\x9b\x96\xe1\x2c\x97\xf9\x04\x3d\x1e\xf0\x26\x51\x61\xdb\x73\x35\x81\x2d\x26\x42\xde\x24\xbf\xb7\xa3\xab\xcb\x83\x02\xc6\xa6\x29\x7e\xee\x6b\x66\xc7\x56\x4e\xe0\x0e\x34\xa8\xc0\x69\x12\x4a\xd9\x06\x1b\x59\x3d\x29\x7b\x82\xb3\x81\xab\x2c\x47\x7a\xd9\x19\x15\x6e\x5b\xd1\x8d\x47\x21\x0f\xc6\xb4\x66\xd5\x6a\x56\xad\xf8\x65\x79\xae\x6f\x6d\x28\x92\xc3\xe6\x68\x15\xe0\x9c\x79\xd5\xe8\x86\xbe\xa3\x5d\xe9\x1b\xe6\xa4\x90\xbd\xc5\x02\xc8\x7b\x05\x4d\xf0\x43\x21\x1a\x95\x84\xa7\x7a\x77\xe5\x08\x9a\xb0\x6a\x90\xff\x8b\x66\xc0\xcc\x38\x31\x17\x4a\x8b\x31\x14\xc5\xe5\x54\xca\xa2\x0a\x04\x31\xad\xbc\x41\x4b\xf4\x00\xb8\x5d\x30\xfe\xcb\x99\xad\x2d\x26\x0c\xd3\x84\x80\xeb\x30\xf0\xa1\xcb\x84\xe2\x8d\xc5\xc2\x5c\x7b\xe5\x3a\x00\x13\x3c\xd0\x06\xc1\xf8\x03\x26\x1f\x31\x39\xff\x73\xbe\x37\x5f\x88\xe8\xf4\xe7\xb3\xf7\x37\x67\x7b\x18\xed\xfc\x3a\xd8\xc1\xf8\x39\xc6\x3b\x18\x1d\x61\x74\x81\xd1\x1b\x8c\x5f\xe2\x76\x3c\xd7\x9c\x7e\x96\x73\x4f\xcb\x28\xc7\xb5\x14\xf7\x3b\xc6\x82\xea\x79\x71\xe5\x98\x54\xc1\x97\x41\x4f\xcd\xc6\xca\x4a\xc5\xdf\xd0\xf5\x3b\x72\xf8\x80\xdc\xe7\xed\x7b\x19\x13\x79\x58\x31\xbb\xc4\x2a\x94\x95\x18\x9d\x5e\x7f\xba\xb8\xbe\x7c\x8b\xd1\x6e\x66\xf1\x31\x46\x27\xe9\x33\x79\x95\x56\xc7\x47\x18\x9f\x61\x74\x8c\xd1\xeb\x05\xd3\x53\x2e\x14\x87\xc9\x2d\x83\xe9\x76\xf0\xe1\x1c\xdc\x20\x43\x55\xa7\x54\x48\x87\x89\xbe\x54\xba\xbe\xbe\xb6\xbe\x46\x03\x29\xbd\xaa\xc3\xa2\x39\xd2\x77\x84\x54\x1c\x9a\xb0\x6c\xe0\xa5\x8d\x72\x32\x37\x5f\xe3\xab\xef\x4f\x32\xd9\x17\xd9\x73\xff\xd6\x58\xfe\x69\xbf\xf4\x8b\x8d\xab\x72\xf0\x05\x92\xd9\x4a\x5a\x6c\x30\x48\x87\xb5\x6a\x10\x5b\xb8\x2d\x62\x5a\xe9\x46\x1b\xdc\xea\x30\xcd\xcc\x25\x24\xf9\xf7\x34\xcb\xcc\xff\x5b\x36\xcd\xde\x8c\x7f\x03\x00\x00\xff\xff\x3a\xec\x95\x88\x20\x05\x00\x00")

func templatesChatHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesChatHtml,
		"templates/chat.html",
	)
}

func templatesChatHtml() (*asset, error) {
	bytes, err := templatesChatHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/chat.html", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1503066138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/chat.html": templatesChatHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"chat.html": &bintree{templatesChatHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

